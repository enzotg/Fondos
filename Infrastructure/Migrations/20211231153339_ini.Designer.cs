// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FondosContext))]
    [Migration("20211231153339_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Domain.Entities.CuentaAggregate.Cuenta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CasaId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("TEXT");

                    b.Property<long>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TipoCuentaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoCuentaId");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("Domain.Entities.CuentaAggregate.CuentaPersona", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CuentaId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Orden")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PersonaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("CuentaPersona");
                });

            modelBuilder.Entity("Domain.Entities.MovimientoAggregate.CuentaSaldo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CuentaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaUltMov")
                        .HasColumnType("TEXT");

                    b.Property<double>("InteresAcum")
                        .HasColumnType("REAL");

                    b.Property<double>("Saldo")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.ToTable("CuentaSaldo");
                });

            modelBuilder.Entity("Domain.Entities.MovimientoAggregate.Movimiento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Anulado")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CuentaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaGrab")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaOp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Importe")
                        .HasColumnType("REAL");

                    b.Property<long>("InfAdicional")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NumeroOp")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OperacionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SaldoGr")
                        .HasColumnType("REAL");

                    b.Property<double>("SaldoOp")
                        .HasColumnType("REAL");

                    b.Property<long>("SucursalIdMov")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("OperacionId");

                    b.ToTable("Movimiento");
                });

            modelBuilder.Entity("Domain.Entities.Operacion", b =>
                {
                    b.Property<long>("OperacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Automatica")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisponibleOp")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ImprimeCompr")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<byte>("OperadorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ProcesoMes")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoOperacionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OperacionId");

                    b.HasIndex("TipoOperacionId");

                    b.ToTable("Operacion");

                    b.HasData(
                        new
                        {
                            OperacionId = 1L,
                            Automatica = false,
                            DisponibleOp = true,
                            ImprimeCompr = false,
                            Nombre = "Deposito",
                            OperadorId = (byte)1,
                            ProcesoMes = false,
                            TipoOperacionId = (byte)1
                        },
                        new
                        {
                            OperacionId = 2L,
                            Automatica = false,
                            DisponibleOp = true,
                            ImprimeCompr = false,
                            Nombre = "Extraccion",
                            OperadorId = (byte)2,
                            ProcesoMes = false,
                            TipoOperacionId = (byte)1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApNombre")
                        .HasColumnType("TEXT");

                    b.Property<long>("Cuil")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Documento")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TipoDocumentoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Domain.Entities.TipoCuenta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoCuenta");
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoDocumento");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Nombre = "DNI"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TipoOperacion", b =>
                {
                    b.Property<byte>("TipoOperacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("TipoOperacionId");

                    b.ToTable("TipoOperacion");

                    b.HasData(
                        new
                        {
                            TipoOperacionId = (byte)1,
                            Nombre = "Comun"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CuentaAggregate.Cuenta", b =>
                {
                    b.HasOne("Domain.Entities.TipoCuenta", "TipoCuenta")
                        .WithMany()
                        .HasForeignKey("TipoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoCuenta");
                });

            modelBuilder.Entity("Domain.Entities.CuentaAggregate.CuentaPersona", b =>
                {
                    b.HasOne("Domain.Entities.CuentaAggregate.Cuenta", "Cuenta")
                        .WithMany("CuentaPersona")
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.MovimientoAggregate.CuentaSaldo", b =>
                {
                    b.HasOne("Domain.Entities.CuentaAggregate.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Domain.Entities.MovimientoAggregate.Movimiento", b =>
                {
                    b.HasOne("Domain.Entities.CuentaAggregate.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operacion", "Operacion")
                        .WithMany()
                        .HasForeignKey("OperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuenta");

                    b.Navigation("Operacion");
                });

            modelBuilder.Entity("Domain.Entities.Operacion", b =>
                {
                    b.HasOne("Domain.Entities.TipoOperacion", "TipoOperacion")
                        .WithMany()
                        .HasForeignKey("TipoOperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoOperacion");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.Entities.CuentaAggregate.Cuenta", b =>
                {
                    b.Navigation("CuentaPersona");
                });
#pragma warning restore 612, 618
        }
    }
}
